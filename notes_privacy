
ios: total 568,082,642

every 100,000 th document.... gives us around 5700 documents.

Split into three files: ios_permissions, ios_no_permissions, ios

Also, get mean/median stats for price, rating, timestamp  for each table.

- hasInAppPurchases
- supportsPassbook

- app_name
- price (has a $ in front of the number..)
- timestamp
- ratingCountList (5 elements) (sometimes null)




android: total 772,441,534

every 100,000 th document.... gives us around 7700 documents.

Split into three files: android_permissions, android_no_permissions, android

Also, get mean/median stats for price, rating, timestamp  for each table.

Field names:
- privacy_policy

- app_name
- price
- timestamp
- ratings (5 elements) (unlikely to be null, but just to be safe...)








google_play.main_sql

permission1 -> permission10

"Market billing service" -> allows user to purchase items through Market from within this application.

"Your accounts"/"discover known accounts"








*** Does fs.appendFileSync(...) create a new line??? ***







Email Tucker about using NodeJS 1. for performance (send her benchmark blog http://karlheinzniebuhr.github.io/en/2015/09/28/C-vs-Go-vs-pypy-vs-Python/ ). 2. because JSON/MongoDB data format is native to Javascript, and Python programs have to import a separate JSON interpreter. Also slows down.



=====================================




ios reviews info


doc["feed"]["entry"]   ===> if no entry, then no reviews.


0: app info

im:name.label

im:price.attributes.amount
im:price.attributes.currency

****  id.attributes.im:id



1 and greater (as long as it has an "author"field):


doc["feed"]["entry"][1]

//author.name.label

im:version.label

im:rating.label

****  id.label

title.label

content.label

//link.attributes.href













How to sort the database:::

By app (include app name and app id)

Then have a list of reviews







